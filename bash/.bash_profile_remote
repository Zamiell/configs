# shellcheck shell=bash

# ----------------
# Helper functions
# ----------------

is_git_bash() (
  set -euo pipefail # Exit on errors and undefined variables.

  local kernel_name
  kernel_name=$(uname -s) # The "--kernel-name" flag is not supported on MacOS.
  [[ "$kernel_name" =~ ^MINGW || "$kernel_name" =~ ^MSYS_NT ]]
)

is_github_repository() (
  set -euo pipefail # Exit on errors and undefined variables.

  local remote_url
  remote_url=$(git config --get remote.origin.url) # e.g. "git@github.com:alice/my-repo.git" or "https://github.com/alice/my-repo.git"
  if echo "$remote_url" | grep -q "github.com"; then
    return 0 # True
  else
    return 1 # False
  fi
)

get_num_github_repository_commits() (
  set -euo pipefail # Exit on errors and undefined variables.

  if [[ -z "${1:-}" ]]; then
    echo "Error: Repository owner is required. Usage: get_num_github_repository_commits <repository_owner> <repository_name>"
    return 1
  fi
  local repository_owner="$1"

  if [[ -z "${2:-}" ]]; then
    echo "Error: Repository name is required. Usage: get_num_github_repository_commits <repository_owner> <repository_name>"
    return 1
  fi
  local repository_name="$2"

  local response
  response=$(curl -s -I "https://api.github.com/repos/$repository_owner/$repository_name/commits?per_page=1")

  if echo "$response" | grep --quiet "404 Not Found"; then
    echo "Error: Repository \"$repository_owner/$repository_name\" was not found."
    return 1
  fi

  local commit_count
  commit_count=$(echo "$response" | grep -i 'link:' | grep -o 'page=[0-9]*' | tail -1 | cut -d= -f2)

  if [ -n "$commit_count" ]; then
    echo "$commit_count"
  else
    # No pagination implies one page of commits.
    echo "1"
  fi
)

# ---------------------
# Environment Variables
# ---------------------

# Load secret environment variables that cannot be committed to Git.
if [[ -f "$HOME/.env" ]]; then
  # shellcheck source=/dev/null
  source "$HOME/.env"
fi

# Fix self-signed certs for LogixHealth.
if [[ -f "/usr/local/share/ca-certificates/BEDROOTCA001.crt" ]]; then
  export COMPANY_CERT_PATH="/usr/local/share/ca-certificates/BEDROOTCA001.crt"
elif [[ -f "/c/tls/BEDROOTCA001.crt" ]]; then
  export COMPANY_CERT_PATH="/c/tls/BEDROOTCA001.crt"
elif [[ -f "/c/_IT/tls/BEDROOTCA001.crt" ]]; then
  export COMPANY_CERT_PATH="/c/_IT/tls/BEDROOTCA001.crt"
fi
if [[ -n "${COMPANY_CERT_PATH-}" ]]; then
  export NODE_EXTRA_CA_CERTS="$COMPANY_CERT_PATH"
  export CURL_CA_BUNDLE="$COMPANY_CERT_PATH"
fi
if [[ -f "/c/Program Files (x86)/Microsoft SDKs/Azure/CLI2/lib/site-packages/certifi/cacert.pem" ]]; then
  export REQUESTS_CA_BUNDLE="/c/Program Files (x86)/Microsoft SDKs/Azure/CLI2/lib/site-packages/certifi/cacert.pem"
fi
if [[ -f "/c/Program Files/Microsoft SDKs/Azure/CLI2/lib/site-packages/certifi/cacert.pem" ]]; then
  export REQUESTS_CA_BUNDLE="/c/Program Files/Microsoft SDKs/Azure/CLI2/lib/site-packages/certifi/cacert.pem"
fi

# Add browsers to the path, which is necessary for the GitHub CLI.
if ! command -v chrome &> /dev/null && [[ -f "/c/Program Files/Google/Chrome/Application/chrome.exe" ]]; then
  export PATH="$PATH:/c/Program Files/Google/Chrome/Application"
fi
if ! command -v msedge &> /dev/null && [[ -f "/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" ]]; then
  export PATH="$PATH:/c/Program Files (x86)/Microsoft/Edge/Application"
fi

# ----------------------
# Miscellaneous Commands
# ----------------------

# A better "ll" alias that shows human-readable file sizes.
alias ll="ls -alFh"

# "n" is short for "nuke".
alias n="npx complete-cli@latest nuke"

# "o" is short for "open", to open a URL in a browser.
o() (
  set -euo pipefail # Exit on errors and undefined variables.

  if [[ -z "${1:-}" ]]; then
    echo "Error: URL is required. Usage: o <url>"
    return 1
  fi
  local url="$1"

  if [[ "$url" == *"logixhealth.com"* ]]; then
    local browser="msedge"
  else
    local browser="chrome"
  fi

  if [[ "$browser" == "msedge" ]]; then
    if ! command -v msedge &> /dev/null; then
      echo "Git commit URL is at:"
      echo "$url"
      return 0
    fi
    msedge "$url"
  elif [[ "$browser" == "chrome" ]]; then
    if ! command -v chrome &> /dev/null; then
      echo "Git commit URL is at:"
      echo "$url"
      return 0
    fi
    chrome "$url"
  fi
)

# "r" is short for switching to the repositories directory.
if [[ -d "/c/Users/$USERNAME/Repositories" ]]; then # Generic Windows
  REPOSITORIES_DIRECTORY="/c/Users/$USERNAME/Repositories"
elif [[ -d "/Users/$USERNAME/Repositories" ]]; then # Generic MacOS
  REPOSITORIES_DIRECTORY="/Users/$USERNAME/Repositories"
elif [[ -d "/home/$USER/repositories" ]]; then # Generic Linux
  REPOSITORIES_DIRECTORY="/home/$USER/repositories"
elif [[ -d "/c/Repositories" ]]; then # Windows separate drive
  REPOSITORIES_DIRECTORY="/c/Repositories"
elif [[ -d "/d/Repositories" ]]; then # Windows separate drive
  REPOSITORIES_DIRECTORY="/d/Repositories"
fi
if [[ -n "$REPOSITORIES_DIRECTORY" ]]; then
  alias r='cd $REPOSITORIES_DIRECTORY'
  cd "$REPOSITORIES_DIRECTORY"
fi

# ----------------
# kubectl Commands
# ----------------

alias k="kubectl"
alias kdd="kubectl describe deployment"
alias kdp="kubectl describe pod"
alias kds="kubectl describe service"
alias kgd="kubectl get deployment"
alias kgp="kubectl get pod"

# ------------
# npm Commands
# ------------

run_package_script() (
  set -euo pipefail # Exit on errors and undefined variables.

  if [ -z "${1-}" ]; then
    echo "Error: Script name is required."
    return 1
  fi

  local command="npm"
  if [ -f "yarn.lock" ]; then
    command="yarn"
  elif [ -f "pnpm-lock.yaml" ]; then
    command="pnpm"
  elif [ -f "bun.lock" ]; then
    command="bun"
  fi

  "$command" run "$@"
)

alias b="run_package_script build"
alias l="run_package_script lint"
alias p="run_package_script publish"
alias s="run_package_script start"
alias t="run_package_script test"
alias u="run_package_script update"

# ----------
# Git Config
# ----------

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-coreautocrlf
# Default value: input
# Explicitly setting it to false prevents Git from changing line endings at any point, which can
# prevent issues when Windows users collaborate with MacOS/Linus users.
git config --global core.autocrlf false

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-coreignoreCase
# Default value: false (on Linux machines) or true (on Windows machines)
# Explicitly setting it to false can prevent problems with interop between Linux & Windows.
git config --global core.ignorecase false

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-diffcolorMoved
# Default value: false
# Setting zebra can make git diffs easier to read by having a different color for moved lines.
git config --global diff.colorMoved zebra

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-fetchprune
# Default value: false
# Automatically remove any remote-tracking references that no longer exist on the remote.
git config --global fetch.prune true

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-fetchpruneTags
# Default value: false
# Automatically remove any tags that no longer exist on the remote.
git config --global fetch.pruneTags true

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-pullrebase
# Default value: false
# Setting this prevents spurious merge commits.
git config --global pull.rebase true

# https://git-scm.com/docs/git-config/#Documentation/git-config.txt-pushautoSetupRemote
# Default value: false
# Setting this automates having "git pull" and "git push" work properly after setting up a new
# branch.
git config --global push.autoSetupRemote true

# ------------
# Git Commands
# ------------

# "ga" is short for "git add".
alias ga="git add"

# "gaa" is short for "git add --all".
alias gaa="git add --all"

# - "gb" is short for creating a new git branch, which is a common coding task.
# - If the remote repository is not GitHub, this will make the branch according to the LogixHealth
#   branch naming convention.
# - Doing a push is important after creating a new branch because it prevents subsequent `git pull`
#   calls from failing.
gb() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    local description="misc"
  else
    local description="$1"
  fi

  if [[ -z "${2:-}" ]]; then
    local application_name="misc"
  else
    local application_name="$2"
  fi

  if is_github_repository; then
    local new_branch_name="$description"
  else
    local new_branch_name="feature/$application_name/$USERNAME/$description"
  fi

  if [[ -n "$(git status --porcelain)" ]]; then
    git stash push -m "Auto-stash before creating a new git branch"
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  if [[ "$(git branch --show-current)" != "$main_branch_name" ]]; then
    git switch "$main_branch_name"
  fi

  git pull --rebase
  git switch --create "$new_branch_name"
  git push

  if [[ $(git stash list | wc -l) -gt 0 ]]; then
    git stash pop
  fi

  echo
  gbl
)

# "gb_" is the same thing as "gb", but if the remote repository is not GitHub, it will omit the
# branch naming logic.
gb_() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    local new_branch_name="misc"
  else
    local new_branch_name="$1"
  fi

  if [[ -n "$(git status --porcelain)" ]]; then
    git stash push -m "Auto-stash before creating a new git branch"
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  if [[ "$(git branch --show-current)" != "$main_branch_name" ]]; then
    git switch "$main_branch_name"
  fi

  git pull --rebase
  git switch --create "$new_branch_name"
  git push

  if [[ $(git stash list | wc -l) -gt 0 ]]; then
    git stash pop
  fi

  echo
  gbl
)

# "gbc" is short for "git branch clean", which will remove all local branches that do not exist on
# the remote repository.
# https://stackoverflow.com/questions/7726949/remove-tracking-branches-no-longer-on-remote
gbc() (
  set -euo pipefail # Exit on errors and undefined variables.

  local skip_fetch=false
  for arg in "$@"; do
    if [[ "$arg" == "--skip-fetch" ]]; then
      skip_fetch=true
    fi
  done

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  if [[ "$(git branch --show-current)" != "$main_branch_name" ]]; then
    git switch "$main_branch_name"
  fi

  if [[ "$skip_fetch" == false ]]; then
    git fetch --prune --quiet
  fi

  git branch -vv | awk "/: gone]/{print \$1}" | xargs --no-run-if-empty git branch --delete --force

  echo
  gbl
)

# "gbd" is short for "git branch delete", which will delete the branch both locally and remotely.
gbd() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: Branch name or number is required. Usage: gbd <branch-name-or-number>"
    return 1
  fi

  if [[ "$1" =~ ^[0-9]+$ ]]; then
    local branch_number="$1"
    local branches
    branches=$(git for-each-ref --format="%(refname:short)" refs/heads/ | sort)
    local branch_name
    branch_name=$(echo "$branches" | sed -n "${branch_number}p")

    if [[ -z "$branch_name" ]]; then
      echo "Error: Branch number $branch_number does not exist."
      return 1
    fi
  else
    local branch_name="$1"
  fi

  if git show-ref --verify --quiet "refs/heads/$branch_name"; then
    git branch --delete --force "$branch_name"
    echo "Deleted branch \"$branch_name\" locally."
  else
    echo "Warning: Branch \"$branch_name\" does not exist locally."
  fi

  if git ls-remote --heads origin "$branch_name" | grep -q .; then
    git push origin ":$branch_name"
    echo "Deleted branch \"$branch_name\" remotely."
  else
    echo "Warning: Branch \"$branch_name\" does not exist on remote origin."
  fi

  echo
  gbl
)

# "gbdl" is short for "git branch delete local", which will delete the branch locally (and not
# remotely).
gbdl() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: Branch name or number is required. Usage: gbdl <branch-name-or-number>"
    return 1
  fi

  if [[ "$1" =~ ^[0-9]+$ ]]; then
    local branch_number="$1"
    local branches
    branches=$(git for-each-ref --format="%(refname:short)" refs/heads/ | sort)
    local branch_name
    branch_name=$(echo "$branches" | sed -n "${branch_number}p")

    if [[ -z "$branch_name" ]]; then
      echo "Error: Branch number $branch_number does not exist."
      return 1
    fi
  else
    local branch_name="$1"
  fi

  if git show-ref --verify --quiet "refs/heads/$branch_name"; then
    git branch --delete --force "$branch_name"
    echo "Deleted branch \"$branch_name\" locally."
  else
    echo "Warning: Branch \"$branch_name\" does not exist locally."
  fi

  echo
  gbl
)

# "gbl" is short for "git branch list". ("gb" is already taken by another command.)
gbl() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  local branches
  branches=$(git --no-pager branch | sed 's/^[ *]*//')
  local current_branch
  current_branch=$(git branch --show-current)

  local GREEN_CODE='\033[32m'
  local RESET_CODE='\033[0m'
  local count=1

  echo "Current git branches:"

  while IFS= read -r branch; do
    if [[ "$branch" == "$current_branch" ]]; then
      echo -e "${GREEN_CODE}* ${count} - ${branch}${RESET_CODE}"
    else
      echo "  ${count} - ${branch}"
    fi

    ((count++))
  done <<< "$branches"
)

# "gbr" is short for "git branch rename", which will rename the application portion of a LogixHealth
# branch name.
gbr() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: Application name is required. Usage: gbr <application-name>"
    return 1
  fi
  local app_name="$1"

  local old_branch_name
  old_branch_name=$(git branch --show-current) # e.g. "feature/app1/alice/fix-bug"
  echo "Old branch name: $old_branch_name"
  local new_branch_name
  new_branch_name=$(echo "$old_branch_name" | sed -E "s~^([^/]+/)([^/]+)(/.*$)~\1${app_name}\3~") # e.g. "feature/app2/alice/fix-bug"
  echo "New branch name: $new_branch_name"

  git switch --create "$new_branch_name"
  git push
  git branch -D "$old_branch_name" # Delete the old branch locally.
  git push origin ":$old_branch_name" # Delete the old branch on the remote.
)

# "gbr_" is the same as "gbr", but it will omit the branch naming logic.
gbr_() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: Branch name is required. Usage: gbrr <branch-name>"
    return 1
  fi
  local new_branch_name="$1"

  local old_branch_name
  old_branch_name=$(git branch --show-current) # e.g. "feature/app1/alice/fix-bug"
  echo "Old branch name: $old_branch_name"
  echo "New branch name: $new_branch_name"

  git switch --create "$new_branch_name"
  git push
  git branch -D "$old_branch_name" # Delete the old branch locally.
  git push origin ":$old_branch_name" # Delete the old branch on the remote.
  gpr
)

# "gbs" is short for "git branch squash", which squash all commits on the branch.
gbs() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  local branch_name
  branch_name=$(git branch --show-current)

  if [[ "$branch_name" == "$main_branch_name" ]]; then
    echo "Error: This function is intended to be run on a feature branch and you are currently on the \"$main_branch_name\" branch."
    return 1
  fi

  local merge_base
  merge_base=$(git merge-base master "$branch_name")
  local num_branch_commits
  num_branch_commits=$(git rev-list --count "$merge_base..$branch_name")

  git reset --soft "HEAD~$num_branch_commits"
  git commit -m "chore: squashed $num_branch_commits commits"
  git push --force
)

# "gc" is short for "git commit", which will perform all the steps involved in making a new commit
# with all unstaged changes.
gc() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  local branch_name
  branch_name=$(git branch --show-current)
  local remote_branch_info
  remote_branch_info=$(git ls-remote --heads origin "$branch_name")

  if [[ -z "$remote_branch_info" ]]; then
    echo "Error: The remote branch of \"$branch_name\" does not yet exist."
    return 1
  fi

  if [[ $# -eq 0 ]]; then
    local commit_msg="update"
  else
    local commit_msg="$*"
  fi

  git add --all
  git commit -m "$commit_msg"
  git pull --rebase
  git push

  gcs
)

# "gcs" is short for "git commit show", which will open a browser to view the last commit.
gcs() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  local commit_sha1
  commit_sha1=$(git rev-parse HEAD) # e.g. "efe970b4d2d9c7a7023919ea677efce70222c201"
  local remote_url
  remote_url=$(git config --get remote.origin.url) # e.g. "git@github.com:alice/my-repo.git" or "https://github.com/alice/my-repo.git"
  if echo "$remote_url" | grep -q "github.com"; then
    if [[ "$remote_url" == git@* ]]; then
      # SSH URL format: git@github.com:alice/my-repo.git
      local repository_owner
      repository_owner=$(echo "$remote_url" | sed -E 's/^git@github\.com:([^/]+)\/.*\.git/\1/')
      local repository_name
      repository_name=$(echo "$remote_url" | sed -E 's/git@github\.com:[^\/]+\/(.*)\.git/\1/')
    else
      # HTTPS URL format: https://github.com/alice/my-repo.git
      local repository_owner
      repository_owner=$(echo "$remote_url" | sed -E 's|https://github\.com/([^/]+)/.*\.git|\1|')
      local repository_name
      repository_name=$(echo "$remote_url" | sed -E 's|https://github\.com/[^/]+/(.*)\.git|\1|')
    fi
    local commit_url="https://github.com/$repository_owner/$repository_name/commit/$commit_sha1"
  elif echo "$remote_url" | grep -q "azuredevops.logixhealth.com"; then
    local organization_name
    organization_name=$(echo "$remote_url" | awk -F'/' '{print $(NF-3)}')
    local project_name
    project_name=$(echo "$remote_url" | awk -F'/' '{print $(NF-2)}')
    local repository_name
    repository_name=$(git rev-parse --show-toplevel | xargs basename)
    local commit_url="https://azuredevops.logixhealth.com/$organization_name/$project_name/_git/$repository_name/commit/$commit_sha1"
  elif echo "$remote_url" | grep -q "dev.azure.com"; then
    local commit_url="https://dev.azure.com/logixhealth/Main/_git/$repository_name/commit/$commit_sha1"
  else
    echo "Failed to parse the remote URL for this repository."
    return 1
  fi

  o "$commit_url"
)

# "gcu" is short for "git commit undo", which will undo the last commit locally (but not on the remote).
alias gcu="git reset HEAD~1 --soft"

# "gd" is short for "git diff".
alias gd="git diff"

# "gl" is short for "git log".
alias gl="git log"

# "glg" is short for "git log --graph" with specific formatting.
alias glg="git log --graph --pretty=format:'%C(yellow)%h%Creset %C(cyan)%d%Creset %C(white)%s%Creset %C(green)(%an)%Creset%n%w(0,8,8)%b%Creset' --all --decorate"

# "gp" is short for "git pull".
alias gp="git pull --rebase"

# "gpr" is short for "git pull request", to start a new pull request based on the current branch.
gpr() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if is_github_repository; then
    gh pr create
  else
    local remote_url
    remote_url=$(git config --get remote.origin.url) # e.g. "git@github.com:alice/my-repo.git" or "https://github.com/alice/my-repo.git"
    local organization_name
    organization_name=$(echo "$remote_url" | awk -F'/' '{print $(NF-3)}')
    local project_name
    project_name=$(echo "$remote_url" | awk -F'/' '{print $(NF-2)}')
    local repository_name
    repository_name=$(git rev-parse --show-toplevel | xargs basename)
    local branch_name
    branch_name=$(git branch --show-current)
    local pr_url="https://azuredevops.logixhealth.com/$organization_name/$project_name/_git/$repository_name/pullrequestcreate?sourceRef=$branch_name"
    o "$pr_url"
  fi
)

# "grb" is short for "git rebase".
alias grb="git rebase"

# "grba" is short for "git rebase --abort".
alias grba="git rebase --abort"

# "grbc" is short for "git rebase --continue".
alias grbc="git rebase --continue"

# "grbm" is short for "git rebase main".
grbm() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  if [[ "$(git branch --show-current)" == "$main_branch_name" ]]; then
    echo "You are on the \"$main_branch_name\" branch, so you cannot rebase this branch on itself."
    return 1
  fi

  git fetch origin $main_branch_name
  git rebase origin/$main_branch_name
  git push --force
)

# "grs" is short for "git reset".
alias grs="git reset"

# "grsh" is short for "git reset --hard".
alias grsh="git reset --hard"

# "grv" is short for "git revert".
grv() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: Commit SHA1 is required. Usage: grv <commit_sha1>"
    return 1
  fi
  local commit_sha1="$1"

  git revert "$commit_sha1"
  git push
)

# "grva" is short for "git revert --abort".
alias grva="git revert --abort"

# "grvc" is short for "git revert --continue".
alias grvc="git revert --continue"

# "grvl" is short for "git revert last". ("grh" is already taken by another command.)
grvl() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  # "--no-edit" avoids prompting for a commit message and uses the default commit message.
  git revert HEAD --no-edit
  git push
)

# "gs" is short for "git status --porcelain". (The "--porcelain" flag is preferred since the output
# is more terse.)
alias gs="git status --porcelain"

# "gsq" stands for "git squash", to squash N commits together.
gsq() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: You must provide the number of commits to squash."
    return 1
  fi
  local number_of_commits="$1"

  git reset --soft "HEAD~$number_of_commits"
  git commit -m "chore: squash $number_of_commits commits"
  git push --force
)

# "gst" is short for "git stash".
alias gst="git stash"

# "gstd" is short for "git stash drop".
alias gstd="git stash drop"

# "gstl" is short for "git stash list".
alias gstl="git stash list"

# "gstp" is short for "git stash pop"
alias gstp="git stash pop"

# "gsw" is short for "git switch". It requires an argument of the number corresponding to the
# alphabetical local branch. ("gs" is already taken by another command.)
gsw() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  if [[ -z "${1:-}" ]]; then
    echo "Error: Branch name or number is required. Usage: gsw <branch-name-or-number>"
    return 1
  fi

  if [[ "$1" =~ ^[0-9]+$ ]]; then
    local branch_number="$1"
    local branches
    branches=$(git for-each-ref --format="%(refname:short)" refs/heads/ | sort)
    local branch_name
    branch_name=$(echo "$branches" | sed -n "${branch_number}p")

    if [[ -z "$branch_name" ]]; then
      echo "Error: Branch number $branch_number does not exist."
      return 1
    fi
  else
    local branch_name="$1"
  fi

  git switch "$branch_name"
)

# "gswc" is short for "git switch -c". (However, the "gb" command should be used in most contexts.)
alias gswc="git switch -c"

# "gswm" is short for "git switch main".
gswm() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  if git show-ref --verify --quiet refs/heads/main; then
    local main_branch_name="main"
  elif git show-ref --verify --quiet refs/heads/master; then
    local main_branch_name="master"
  else
    echo "Error: There was not a \"main\" branch or \"master\" branch in this repository."
    return 1
  fi

  if [[ -n "$(git status --porcelain)" ]]; then
    git stash push -m "Auto-stash before switching to $main_branch_name"
  fi

  if [[ "$(git branch --show-current)" != "$main_branch_name" ]]; then
    git switch "$main_branch_name"
  fi

  git pull --rebase
  gbc --skip-fetch # git branch clean
  git stash list
)

# "gtc" is short for "git tags clean", which will remote all local tags that do not exist on the
# remote repository.
# https://stackoverflow.com/questions/1841341/remove-local-git-tags-that-are-no-longer-on-the-remote-repository
gtc() (
  set -euo pipefail # Exit on errors and undefined variables.

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not inside a Git repository."
    return 1
  fi

  git tag -l | xargs git tag -d
  git fetch --tags

  echo
  echo "Current git tags:"
  git tag
)

# "gu" is short for "git push".
alias gu="git push"

# "guf" is short for "git push --force".
alias guf="git push --force"

# ---------------
# Pulumi Commands
# ---------------

# "pu" is short for "pulumi up".
alias pu="pulumi up"

# "pd" is short for "pulumi destroy".
alias pd="pulumi destroy"

# "pr" is short for "pulumi refresh".
alias pr="pulumi refresh"

# ------------------
# Terraform Commands
# ------------------

# "ta" is short for "terraform apply".
alias ta="terraform apply"

# "tc" is short for "terraform clean".
alias tc="rm -rf .terraform .terraform.lock.hcl terraform.tfstate terraform.tfstate.backup"

# "td" is short for "terraform destroy".
alias td="terraform destroy"

# "tf" is short for "terraform fmt".
alias tf="terraform fmt"

# "ti" is short for "terraform init".
alias ti="terraform init"

# "tv" is short for "terraform validate".
alias tv="terraform validate"

# -------
# Version
# -------

BASH_PROFILE_VERSION=$(get_num_github_repository_commits Zamiell configs)
export BASH_PROFILE_VERSION
version() (
  echo "Remote Bash profile version: $BASH_PROFILE_VERSION"
)
version
